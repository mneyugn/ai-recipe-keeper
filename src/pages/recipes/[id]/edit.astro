---
export const prerender = false;

import MainLayout from "@/layouts/Layout.astro";
import RecipeForm from "@/components/RecipeForm.tsx";
import type { RecipeDetailDTO } from "@/types";
// TODO: Import UserProfileDTO and check if user is authenticated
// TODO: Redirect to login if not authenticated
// TODO: Implement actual API call to fetch recipe data

const { id: recipeId } = Astro.params;
// TODO: Authentication check (user = Astro.locals.user)
// if (!user) { return Astro.redirect("/signin"); }

let recipeData: RecipeDetailDTO | null = null;
let error: string | null = null;

if (recipeId) {
  try {
    const response = await fetch(`${Astro.url.origin}/api/recipes/${recipeId}`);

    if (!response.ok) {
      if (response.status === 404) {
        error = "Nie znaleziono przepisu.";
      } else {
        error = "Wystąpił błąd podczas pobierania danych przepisu.";
      }
    } else {
      recipeData = (await response.json()) as RecipeDetailDTO;
    }
  } catch (e) {
    console.error("Error fetching recipe:", e);
    error = "Wystąpił problem podczas ładowania przepisu.";
  }
} else {
  error = "Brak ID przepisu do edycji.";
}

if (error && !recipeData) {
  // If there's an error and no recipe data,
  // consider redirecting or showing a more prominent error message.
  // For now, we'll pass the error to the layout/page to display.
  // return Astro.redirect('/recipes?error=not_found'); // Example redirect
}
---

<MainLayout title={recipeData ? `Edytuj przepis: ${recipeData.name}` : `Edytuj przepis ${recipeId}`}>
  <div class="container mx-auto py-8">
    <h1 class="text-3xl font-bold mb-6">
      {recipeData ? `Edytuj przepis: ${recipeData.name}` : `Edytuj przepis ${recipeId}`}
    </h1>
    {/* Basic rendering for now - will add conditionals back */}
    <RecipeForm client:load mode="edit" recipeId={recipeId} recipeData={recipeData} />
    {error && <p class="text-red-500">{error}</p>}
  </div>
</MainLayout>
